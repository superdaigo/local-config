* Emacs configuration

#+begin_src elisp
  (org-babel-tangle-file "emacs.org")
  (make-directory (expand-file-name "~/.emacs.d/file-backup") t)
  (copy-file "early-init.el" (expand-file-name "~/.emacs.d/early-init.el") t)
  (copy-file "init.el" (expand-file-name "~/.emacs.d/init.el") t)
#+end_src

#+RESULTS:

** Requirements
- Git (required by straight.el)

* Early init file - ~$HOME/.emacs.d/early-init.el~

https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html
#+begin_src elisp :tangle early-init.el
  ;; early-init.el - Emacs configuration file
#+end_src

** Disable packages

Disable ~packages~ to make sure to use ~straight.el~ for package management.

#+begin_src elisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

* Init file - ~$HOME/.emacs.d/init.el~
#+begin_src elisp :tangle init.el
  ;; init.el - Emacs configuration file
#+end_src

** straight.el
https://github.com/radian-software/straight.el

#+begin_src elisp :tangle init.el
  ;; Straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** straight-use-package

https://github.com/jwiegley/use-package

#+begin_src elisp :tangle init.el
  ;; straight-use-package
  (straight-use-package 'use-package)
#+end_src

** Encoding

Use utf-8 as a default encoding.
#+begin_src elisp :tangle init.el
  ;; Encoding
  (setq default-file-name-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8 . utf-8))
#+end_src

** Misc

#+begin_src elisp :tangle init.el
  ;; Misc
  (setq inhibit-startup-message t)       ;; Hide Startup Gnus
  (setq visible-bell t)                  ;; Visible bell (t: Enable, nil: Disable)
  (menu-bar-mode -1)                     ;; Menu bar (1: Enable, -1: Disable)
  (blink-cursor-mode 0)                  ;; Blink Cursor (0: off, 1: blink)
  (show-paren-mode 1)                    ;; Emphasize pair parentheses
  (setq dired-listing-switches "-alhv")  ;; dired human readable
  (global-unset-key (kbd "C-z"))         ;; disable minimize window on macOS GUI mode. The key also assigned to the default tmux key in terminal.

  ;; Display cursor position
  (line-number-mode t)                   ;; Line number
  (column-number-mode t)                 ;; Column number
  ;; Mode line
  (display-time-mode 1)                  ;; Display time
  (setq display-time-day-and-date t)     ;; Display date
  (which-function-mode 1)                ;; Display function name
  ;; File, Buffer
  (setq auto-save-default nil)           ;; No auto-save
  (global-auto-revert-mode 1)            ;; Reload modified buffer automatically
  ;; Tab, Indent
  (setq-default tab-width 4)             ;; Tab width: 4 space
  (setq-default indent-tabs-mode nil)    ;; No tab
  (electric-indent-mode 0)               ;; Prevent auto-indent when pasting
  ;; Font lock
  (setq font-lock-global-modes t)
  (setq text-mode-hook 'turn-off-auto-fill)  ;; Turn off auto-fill
  ;; ;; windmove Move around splitted windows -> conflicted org-mode keybinding
  ;; (windmove-default-keybindings 'meta)       ;; Meta + arrow keys
  ;; (setq windmove-wrap-around t)              ;; Include mini buffer
#+end_src

** Recentf - keep track of recently opened files

Enable recentf-mode and keep large number of histories (10000).
The mode is called through [[*Consult][Consult]].

#+begin_src elisp :tangle init.el
  ;; recentf
  (recentf-mode 1)
  (setq recentf-max-saved-items 10000)
#+end_src

** Ibuffer

Prefer to use ibuffer instead of Emacs default one.

| Key bind | Description        |
|----------+--------------------|
| C-x C-b  | Show opened buffer |

#+begin_src elisp :tangle init.el
  ;; use ibuffer
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Backup file

Make backup file under the ~%HOME/.emacs.d/file-backup~ directory.

#+begin_src elisp :tangle init.el
  ;; Backup
  (setq make-backup-files t)
  ;; Backup directory
  (setq backup-directory-alist
        (cons (cons "\\.*$" (expand-file-name "~/.emacs.d/file-backup"))
              backup-directory-alist))
  (setq version-control t)                   ;; Multiple backups
  (setq kept-new-versions 5)                 ;; Number of new versions
  (setq kept-old-versions 5)                 ;; Number of the old versions
  (setq delete-old-versions t)               ;; Delete old version
#+end_src

** Magit

| Key bind | Description        |
|----------+--------------------|
| C-x g    | Enter magit status |

#+begin_src elisp :tangle init.el
  ;; Magit
  (use-package magit
    :straight t
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    (setq magit-auto-revert-mode nil))
#+end_src

** Consult

| Key bind | Description                             |
|----------+-----------------------------------------|
| C-c f    | Show recent files (recentf)             |
| C-c o    | Show outline (org-mode, rst-mode, etc.) |
| M-g g    | Goto line                               |

Consult is used with other packages.
Dependencies:
- Vertico
- Orderless
- Recentf
- Any of structured text mode (Org, Rst, Markdown, etc.)

#+begin_src elisp :tangle init.el
  ;; consult
  (use-package consult
    :straight t
    :config
    (global-set-key (kbd "C-c f") 'consult-recent-file)
    (global-set-key (kbd "C-c o") 'consult-outline)
    (global-set-key (kbd "M-g g") 'consult-goto-line))
#+end_src

** Vertico

Used by Consult.

#+begin_src elisp :tangle init.el
  ;; vertico
  (use-package vertico
    :straight t
    :config
    (vertico-mode))
#+end_src

** Orderless
Used by Consult and Vertico.
#+begin_src elisp :tangle init.el
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :straight t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** ddskk

Japanese input method for Emacs.
https://github.com/skk-dev/ddskk

| Key bind | Description         |
|----------+---------------------|
| C-\      | Toggle input method |

Initial setup:
Execute ~M-x skk-get~ to download Jisyo files under ~${HOME}/.emacs.d/skk-get-jisyo~ directory.

#+begin_src elisp :tangle init.el
  ;; ddskk
  (use-package ddskk
    :straight t
    :config
    ;; Set ddskk as a default Japanese input method
    (setq default-input-method "japanese-skk")
    ;; Search (migemo)
    ;; Dictionary files
    (setq dir-skk-get-jisyo (expand-file-name "~/.emacs.d/skk-get-jisyo/"))
    (setq skk-large-jisyo (concat dir-skk-get-jisyo "SKK-JISYO.L"))
    (setq skk-extra-jisyo-file-list
          (list (concat dir-skk-get-jisyo "SKK-JISYO.assoc")
                (concat dir-skk-get-jisyo "SKK-JISYO.edict")
                (concat dir-skk-get-jisyo "SKK-JISYO.geo")
                (concat dir-skk-get-jisyo "SKK-JISYO.itaiji")
                (concat dir-skk-get-jisyo "SKK-JISYO.jinmei")
                (concat dir-skk-get-jisyo "SKK-JISYO.JIS2")
                (cons (concat dir-skk-get-jisyo "SKK-JISYO.JIS3_4") 'euc-jis-2004)
                (concat dir-skk-get-jisyo "SKK-JISYO.law")
                (concat dir-skk-get-jisyo "SKK-JISYO.lisp")
                (concat dir-skk-get-jisyo "SKK-JISYO.mazegaki")
                ))
    ;; History file
    )
#+end_src

** markdown-mode
Markdown mode
#+begin_src elisp :tangle init.el
  ;; markdown-mode
  (use-package markdown-mode
    :straight t)
#+end_src

** Programming Language
*** js2-mode
#+begin_src elisp :tangle init.el
  ;; js2-mode
  (use-package js2-mode
    :straight t
    :config
    (setq js-indent-level 2)
    (setq js-expr-indent-offset 2))
#+end_src

*** json-mode
#+begin_src elisp :tangle init.el
  ;; json-mode
  (use-package json-mode
    :straight t
    :config
    (setq js-indent-level 2)
    (setq js-expr-indent-offset 2))
#+end_src

*** go-mode
Go language mode.
Enable TAB indent.
#+begin_src elisp :tangle init.el
  ;; go-mode
  (use-package go-mode
    :straight t
    :config
    (setq indent-tabs-mode t)
    (setq tab-width 4))
#+end_src

*** powershell
PoserShell mode
#+begin_src elisp :tangle init.el
  ;; powershell mode
  (use-package powershell
    :straight t)
#+end_src
*** yaml-mode
YAML mode
#+begin_src elisp :tangle init.el
  ;; yaml mode
  (use-package yaml-mode
    :straight t)
#+end_src

** ob-async
#+begin_src elisp :tangle init.el
  (use-package ob-async
    :straight t)
#+end_src

** ollama-buddy.el
https://github.com/captainflasmr/ollama-buddy

The packate ~ollama-buddy.el~ requires Ollama installation.

Requirement:
Ollama: https://ollama.com

#+begin_src elisp :tangle init.el
  (use-package ollama-buddy
    :straight t
    :bind
    ;; ("C-c o" . ollama-buddy-menu) ;; conflicted with buffer
    ("C-c O" . ollama-buddy-transient-menu-wrapper))
#+end_src
